plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id "org.sonarqube" version "4.0.0.2929"
    id 'jacoco'
}

group = 'com.ssafy.glu'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트를 위한 세팅
    testImplementation 'org.projectlombok:lombok' // 테스트를 위한 세팅
    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // Slf4j
    implementation 'org.slf4j:slf4j-api:2.0.6'
    // logback
    implementation 'ch.qos.logback:logback-classic:1.4.1'

    //==QueryDsl==//
    implementation 'com.querydsl:querydsl-core'
//    implementation 'com.querydsl:querydsl-mongodb'
    implementation('com.querydsl:querydsl-mongodb') {
        exclude group: 'org.mongodb', module: 'mongo-java-driver' // MongoDB 드라이버를 Spring과 QueryDSL이 각각 가지고 있어서 충돌
    }
    implementation  "com.querydsl:querydsl-apt"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Kafka
    implementation 'org.springframework.kafka:spring-kafka'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// 컴파일러 옵션에 annotationProcessor 직접 지정
tasks.named('test') {
    useJUnitPlatform()
}

def querydslGeneratedDir = "$buildDir/generated/querydsl"

querydsl {
    library = "com.querydsl:querydsl-apt"
    springDataMongo = true
    querydslSourcesDir = querydslGeneratedDir
}

sourceSets {
    main.java.srcDir querydslGeneratedDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

sonarqube {
    properties {
        property "sonar.projectKey", ""
        property "sonar.host.url", ""
        property "sonar.login", ""
        property "sonar.java.enablePreviewFeatures", "true"
        property "sonar.scm.provider", "git"
        property "sonar.java.binaries", "$buildDir\\classes\\java\\main"
    }
}

jacocoTestReport {
    reports {
        xml.required.set(true) // or xml.outputLocation.set(file("path/to/xml"))
    }
}
test.finalizedBy jacocoTestReport

tasks["sonar"].dependsOn(build,jacocoTestReport)
